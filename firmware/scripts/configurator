#!/usr/bin/env python3
"""
Configures an attached USB Midi-Fader device

This uses raw parameter numbers and values. It is mainly intended as a test
interface
"""

import hid
import struct, time, argparse, textwrap, ctypes, os
from collections import namedtuple
import xml.etree.ElementTree as ET
from device import *

def parsed_int(v):
    """
    Used as the type for parameters which accept hex integers
    """
    return int(v, 0)

class StorageInvalidError(Exception):
    pass

ParameterDefinition = namedtuple('ParameterDefinition', ['param', 'size'])

def build_parameter_map(filename = 'configuration.storage.xml'):
    scriptdir = os.path.dirname(os.path.realpath(__file__))
    srcdir = os.path.join(scriptdir, os.path.sep.join(['..', 'src']))
    root = ET.parse(os.path.join(srcdir, filename)).getroot()
    parameter_map = {}
    if root.tag != 'storage':
        raise StorageInvalidError('Unexpected root tag {}'.format(root.tag))
    for e in root:
        if e.tag != 'value':
            raise StorageInvalidError('Unexpected tag {}, expected value'.format(e.tag))
        if e.attrib['name'] in parameter_map:
            raise StorageInvalidError('Duplicate parameter name {}'.format(e.attrib['name']))
        if e.attrib['type'] == 'uint8':
            size = 1
        elif e.attrib['type'] == 'uint16':
            size = 2
        elif e.attrib['type'] == 'uint32':
            size = 4
        elif e.attrib['type'] == 'utf8':
            # We don't support the string type at the moment
            continue
        else:
            raise StorageInvalidError('Unrecognized type {}'.format(e.attrib['type']))
        parameter_map[e.attrib['name']] = ParameterDefinition(int(e.attrib['parameter'], 0), size)
    return parameter_map

class DeviceNotFoundError(Exception):
    pass

class NoResponseError(Exception):
    pass

def main():
    parser = argparse.ArgumentParser(description='Configures attached USB Midi-Fader devices',
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=textwrap.dedent(__doc__))
    subparsers = parser.add_subparsers(help='Command type to execute', dest='command')
    subparsers.required = True
    status = subparsers.add_parser('status', help='Gets the device status')
    getter = subparsers.add_parser('get', help='Gets a parameter value')
    getter.add_argument('param', type=str, help='Parameter name to get')
    setter = subparsers.add_parser('set', help='Sets a parameter value')
    setter.add_argument('param', type=str, help='Parameter name to set')
    setter.add_argument('value', type=parsed_int, help='Parameter value')

    parameter_map = build_parameter_map()

    args = parser.parse_args()
    dev = find_device()
    if dev is None:
        raise DeviceNotFoundError
    with dev:
        if args.command == 'get':
            res = dev.get_parameter(parameter_map[args.param].param)
            if res is None:
                raise NoResponseError
            print("Command: {}, Result: {}, Value: {}".format(res.command, res.status, res.value))
        elif args.command == 'set':
            res = dev.set_parameter(parameter_map[args.param].param, args.value, parameter_map[args.param].size)
            if res is None:
                raise NoResponseError
            print("Command: {}, Result: {}".format(res.command, res.status))
        elif args.command == 'status':
            res = dev.status()
            print (res.bytes)
        else:
            raise NotImplementedError


if __name__ == '__main__':
    main()

